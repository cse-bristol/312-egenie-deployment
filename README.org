#+TITLE: CSE Egenie Deployment

This respository contains a slightly modified version of egenie, originally cloned from

https://bitbucket.org/mikejewell/egenie/

egenie is an application which

- records temperature & energy related data sent to it over a network from some sensing devices
- displays records of that data on the screen

The whole system consists of:

1. A django python server-side web application which does most of the work
2. UWSGI as a CGI containery thing for this
3. nginx as the web server, proxying to nginx
4. Mysql as a database

* Changes from upstream

- I removed a load of non-ascii character from source, as these upset python in some locales
- I modified the settings module to connect over unix domain socket
- I used manage.py to regenerate some 'migrations'. Don't know what this actually means, but practically:

  - I deleted every directory called 'migrations' with
    find . -type d -iname migrations -exec rm -rf '{}' ';'

  - I dropped into a nix-shell with the dependencies in it with
    nix-shell ./nix/requirements.nix

  - From in there I did
    python ./src/egenie/manage.py makemigrations

* Nix deployment
I (Tom) don't know much django but I have bodged together a set of nix derivations to build the system.
These are in the ./nix/ directory.

The useful bits are:

- ./nix/egenie.nix

  This is the derivation for a machine which runs egenie with all the dependencies etc

  Weird bits in here are:

  - using an override to install our python environment into uwsgi.
    Using uwsgi's pythonpackages argument didn't work for this
  - the app-start unit is a bit dodge; it might not be the right thing to do to run this every boot.

- ./nix/requirements.nix

  This is the derivation for a python environment containing all the python deps.
  It was generated using pypi2nix on the requirements.txt file under ./src/egenie

  The invocation used should be written into the file as a comment.

  I transformed it a little bit to get ./nix/packages.nix, which is what's used in the machine definition.
  
  The only real bit of hand-editing was adding LC_ALL to one of the packages as it is in utf-8 somewhere.

* Post deployment admin steps

The django management script is on the path as ~egenie-manage~ - to get the thing to work needs a bit of basic database content.

A set of database population commands are:

#+BEGIN_SRC sh
egenie-manage create_anonymous_user
egenie-manage createsuperuser
egenie-manage create_deployment_models
egenie-manage create_spirit_categories
#+END_SRC

The default sensors created by create_deployment_models are only visible to the admin user, but the sd_store routes are given the anonymous user, so any sensors you make need to have user anonymous to appear on the web page as is.

This is configurable in the django admin page at /admin, along with a bunch of other stuff.
You can login to the django admin page using the credentials you gave running ~createsuperuser~.

There is a populate_data manage subcommand to put some bogus data into the database.

* Setting up some sensors
The reporting program is in the [[https://github.com/cse-bristol/312-ctech-hub][ctech-hub]] repository, which see for details on how to set it up.

Once it is working, any sensor readings it's started sending should cause new sensors & channels to go into the database automatically.

For these to appear in the user interface some further config is needed via the /admin url.

- Sensors need adding to a deployment
- Sensors need a map coordinate added to them
- If you want sensors to appear on the graph they need a PairColor defined in the db
  Anything with one of these will appear on the graph with an on/off button.
* Making the floor plan
The floorplan is cut up into parts by a subcommand of the manage script.
If you are deploying with nix this will happen automatically from the file ./nix/floorplan.png
